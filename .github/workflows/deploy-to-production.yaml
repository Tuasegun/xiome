
name: deploy to production
on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  production-deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.repository_owner == 'chase-moskal'
    steps:

    - name: 🛎️ checkout
      uses: actions/checkout@v2

    - name: 🔧 set up node
      uses: actions/setup-node@v2
      with:
        node-version: '17'

    - name: 🎶 set up qemu
      uses: docker/setup-qemu-action@v1

    - name: 🐳 set up docker buildx
      uses: docker/setup-buildx-action@v1

    - name: 🔑 login to github container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 npm install and build
      shell: bash
      run: npm ci && npm run build

    - name: 🚀 npm publish
      uses: JS-DevTools/npm-publish@v1
      with:
        token: ${{ secrets.NPM_TOKEN }}

    - name: 🎁 push image - web
      uses: docker/build-push-action@v2
      with:
        file: ./web/dockerfile
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/web:${{ github.sha }}

    - name: 🎁 push image - api
      uses: docker/build-push-action@v2
      with:
        file: ./s/dockerfile
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/api:${{ github.sha }}

    - name: 🎁 push image - chat
      uses: docker/build-push-action@v2
      with:
        file: ./s/features/chat/api/dockerfile
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ github.repository }}/chat:${{ github.sha }}

    - name: 📜 set kubeconfig
      uses: azure/k8s-set-context@v1
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PROD_KUBECONFIG }}
      id: setcontext

    - name: ⚓ helm deployment
      shell: bash
      env:
        GITHASH: ${{ github.sha }}
        XIOME_CONFIG: ${{ secrets.PROD_XIOME_CONFIG }}
        XIOME_PUBLIC_KEY: ${{ secrets.PROD_XIOME_PUBLIC_KEY }}
        XIOME_PRIVATE_KEY: ${{ secrets.PROD_XIOME_PRIVATE_KEY }}
      run: |
        helm upgrade xiome ./helm \
          --atomic \
          --wait \
          --install \
          --namespace xiome \
          --set-string images.tag=$GITHASH \
          --set-string env.XIOME_CONFIG="$(echo "$XIOME_CONFIG" | base64 -w 0)" \
          --set-string env.XIOME_PUBLIC_KEY="$(echo "$XIOME_PUBLIC_KEY" | base64 -w 0)" \
          --set-string env.XIOME_PRIVATE_KEY="$(echo "$XIOME_PRIVATE_KEY" | base64 -w 0)" \
          -f ./helm/values.yaml
